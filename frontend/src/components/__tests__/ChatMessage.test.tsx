import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { ChatMessage, ChatMessageData } from '../ChatMessage';\n\ndescribe('ChatMessage Component', () => {\n  const validCampaignRecommendation = {\n    id: 'test_recommendation_123',\n    timestamp: new Date().toISOString(),\n    audience: {\n      segment_id: 'high-intent-customers',\n      name: 'High Intent Customers',\n      filters: {\n        intent_score: '>= 0.8',\n        recent_activity: '<= 1h'\n      }\n    },\n    reasoning: {\n      signals: ['Recent cart abandonment detected', 'High product engagement'],\n      score: 0.85,\n      explain: 'Customer shows strong purchase intent based on recent behavior patterns.'\n    },\n    channel_plan: [\n      {\n        channel: 'Email',\n        send_at: new Date(Date.now() + 300000).toISOString(),\n        priority: 1,\n        payload: {\n          subject: 'Complete your purchase now!',\n          title: 'Don\\'t miss out',\n          body: 'You have items waiting in your cart. Complete your purchase now and save 15%!',\n          cta: {\n            text: 'Complete Purchase',\n            url: 'https://example.com/checkout',\n            action: 'checkout'\n          },\n          metadata: {\n            campaign_type: 'cart_abandonment',\n            discount_percent: 15\n          }\n        },\n        delivery_instructions: {\n          retry_policy: 'exponential_backoff',\n          timeout_sec: 30\n        }\n      }\n    ],\n    campaign_meta: {\n      source_snapshot: {\n        website: {\n          cart_abandonment: {\n            cart_value: 150,\n            items_count: 3\n          }\n        }\n      },\n      engine_version: 'v1.0-decision-engine',\n      confidence: 0.87\n    }\n  };\n\n  const invalidCampaignRecommendation = {\n    id: 'test_invalid_123',\n    // Missing timestamp\n    audience: {\n      segment_id: 'test-segment'\n      // Missing name and filters\n    },\n    reasoning: {\n      signals: [], // Empty signals array\n      score: 1.5, // Out of range\n      explain: ''\n    },\n    channel_plan: [\n      {\n        channel: 'InvalidChannel', // Invalid channel\n        send_at: 'invalid-timestamp',\n        priority: 0, // Invalid priority\n        payload: {\n          // Missing body\n          // Missing cta\n          // Missing metadata\n        },\n        delivery_instructions: {\n          // Missing retry_policy and timeout_sec\n        }\n      }\n    ],\n    campaign_meta: {\n      // Missing source_snapshot, engine_version, confidence\n    }\n  };\n\n  const createMessage = (content: any, isJson: boolean = true): ChatMessageData => ({\n    id: 'msg_123',\n    timestamp: new Date().toISOString(),\n    type: 'campaign',\n    content,\n    isJson\n  });\n\n  describe('Valid JSON Campaign Recommendation', () => {\n    test('should render valid campaign recommendation with validation badge', () => {\n      const message = createMessage(validCampaignRecommendation);\n      render(<ChatMessage message={message} />);\n      \n      // Should show valid badge in collapsed state\n      expect(screen.getByText('✓ Valid')).toBeInTheDocument();\n      expect(screen.getByText('JSON')).toBeInTheDocument();\n      \n      // Should show summary with all key information\n      const summary = screen.getByText(/High Intent Customers.*1 channels.*87% confidence.*85% score/);\n      expect(summary).toBeInTheDocument();\n    });\n\n    test('should expand to show structured view when clicked', () => {\n      const message = createMessage(validCampaignRecommendation);\n      render(<ChatMessage message={message} />);\n      \n      // Click to expand\n      const summaryElement = screen.getByText(/High Intent Customers/);\n      fireEvent.click(summaryElement);\n      \n      // Should show structured sections\n      expect(screen.getByText('🏷️ Campaign Info')).toBeInTheDocument();\n      expect(screen.getByText('🎯 Audience')).toBeInTheDocument();\n      expect(screen.getByText('🧠 Reasoning')).toBeInTheDocument();\n      expect(screen.getByText('📱 Channel Plan (1)')).toBeInTheDocument();\n      expect(screen.getByText('⚙️ Campaign Metadata')).toBeInTheDocument();\n      \n      // Should show \"Schema Valid\" badge in expanded state\n      expect(screen.getByText('✓ Schema Valid')).toBeInTheDocument();\n    });\n\n    test('should display campaign info correctly in structured view', () => {\n      const message = createMessage(validCampaignRecommendation);\n      render(<ChatMessage message={message} />);\n      \n      // Expand\n      fireEvent.click(screen.getByText(/High Intent Customers/));\n      \n      // Check campaign info\n      expect(screen.getByText('test_recommendation_123')).toBeInTheDocument();\n      \n      // Check audience info\n      expect(screen.getByText('High Intent Customers')).toBeInTheDocument();\n      expect(screen.getByText('high-intent-customers')).toBeInTheDocument();\n      \n      // Check reasoning\n      expect(screen.getByText('85%')).toBeInTheDocument();\n      expect(screen.getByText('Recent cart abandonment detected')).toBeInTheDocument();\n      expect(screen.getByText('High product engagement')).toBeInTheDocument();\n      \n      // Check channel plan\n      expect(screen.getByText('Email')).toBeInTheDocument();\n      expect(screen.getByText('Priority 1')).toBeInTheDocument();\n      expect(screen.getByText('Complete your purchase now!')).toBeInTheDocument();\n      \n      // Check metadata\n      expect(screen.getByText('v1.0-decision-engine')).toBeInTheDocument();\n      expect(screen.getByText('87%')).toBeInTheDocument();\n    });\n\n    test('should show raw JSON data in details section', () => {\n      const message = createMessage(validCampaignRecommendation);\n      render(<ChatMessage message={message} />);\n      \n      // Expand\n      fireEvent.click(screen.getByText(/High Intent Customers/));\n      \n      // Should have raw JSON details section\n      expect(screen.getByText('Raw JSON Data')).toBeInTheDocument();\n    });\n  });\n\n  describe('Invalid JSON Campaign Recommendation', () => {\n    test('should render invalid campaign recommendation with warning badge', () => {\n      const message = createMessage(invalidCampaignRecommendation);\n      render(<ChatMessage message={message} />);\n      \n      // Should show invalid badge in collapsed state\n      expect(screen.getByText('⚠ Issues')).toBeInTheDocument();\n      \n      // Should show validation warning summary\n      expect(screen.getByText(/validation issue/)).toBeInTheDocument();\n    });\n\n    test('should display validation errors in expanded view', () => {\n      const message = createMessage(invalidCampaignRecommendation);\n      render(<ChatMessage message={message} />);\n      \n      // Click to expand\n      fireEvent.click(screen.getByText(/JSON object with/));\n      \n      // Should show schema issues badge\n      expect(screen.getByText('⚠ Schema Issues')).toBeInTheDocument();\n      \n      // Should show validation errors section\n      expect(screen.getByText('Schema Validation Issues:')).toBeInTheDocument();\n      \n      // Should list specific validation errors\n      expect(screen.getByText(/Missing required field: timestamp/)).toBeInTheDocument();\n      expect(screen.getByText(/Missing required audience field: name/)).toBeInTheDocument();\n      expect(screen.getByText(/Reasoning signals must be a non-empty array/)).toBeInTheDocument();\n      expect(screen.getByText(/Reasoning score must be a number between 0 and 1/)).toBeInTheDocument();\n    });\n\n    test('should still render structured view despite validation errors', () => {\n      const message = createMessage(invalidCampaignRecommendation);\n      render(<ChatMessage message={message} />);\n      \n      // Expand\n      fireEvent.click(screen.getByText(/JSON object with/));\n      \n      // Should still show structured sections even with errors\n      expect(screen.getByText('🏷️ Campaign Info')).toBeInTheDocument();\n      expect(screen.getByText('🎯 Audience')).toBeInTheDocument();\n      expect(screen.getByText('🧠 Reasoning')).toBeInTheDocument();\n      \n      // Should handle missing/invalid data gracefully\n      expect(screen.getByText('N/A')).toBeInTheDocument(); // For missing timestamp\n    });\n  });\n\n  describe('Non-JSON Messages', () => {\n    test('should render text messages correctly', () => {\n      const message = createMessage('This is a simple text message', false);\n      render(<ChatMessage message={message} />);\n      \n      // Should display text content\n      expect(screen.getByText('This is a simple text message')).toBeInTheDocument();\n      \n      // Should not show JSON badges or validation\n      expect(screen.queryByText('JSON')).not.toBeInTheDocument();\n      expect(screen.queryByText('✓ Valid')).not.toBeInTheDocument();\n    });\n\n    test('should handle system and user message types', () => {\n      const systemMessage: ChatMessageData = {\n        id: 'sys_123',\n        timestamp: new Date().toISOString(),\n        type: 'system',\n        content: 'System message',\n        isJson: false\n      };\n      \n      const userMessage: ChatMessageData = {\n        id: 'user_123',\n        timestamp: new Date().toISOString(),\n        type: 'user',\n        content: 'User message',\n        isJson: false\n      };\n      \n      const { rerender } = render(<ChatMessage message={systemMessage} />);\n      expect(screen.getByText('SYSTEM')).toBeInTheDocument();\n      \n      rerender(<ChatMessage message={userMessage} />);\n      expect(screen.getByText('USER')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle null/undefined JSON gracefully', () => {\n      const message = createMessage(null);\n      render(<ChatMessage message={message} />);\n      \n      expect(screen.getByText('null')).toBeInTheDocument();\n    });\n\n    test('should handle malformed JSON objects', () => {\n      const message = createMessage({ invalidStructure: true });\n      render(<ChatMessage message={message} />);\n      \n      // Should show validation issues\n      expect(screen.getByText('⚠ Issues')).toBeInTheDocument();\n    });\n\n    test('should handle rendering errors gracefully', () => {\n      // Create object that might cause rendering issues\n      const problematicMessage = createMessage({\n        audience: {\n          filters: {\n            // Circular reference that might cause issues\n            self: null\n          }\n        }\n      });\n      \n      // Should not throw and render something\n      expect(() => render(<ChatMessage message={problematicMessage} />)).not.toThrow();\n    });\n  });\n\n  describe('Timestamp Formatting', () => {\n    test('should format valid timestamps correctly', () => {\n      const message = createMessage(validCampaignRecommendation);\n      render(<ChatMessage message={message} />);\n      \n      // Should show formatted timestamp in message header\n      const timestampRegex = /\\d{2}:\\d{2}:\\d{2}/;\n      expect(screen.getByText(timestampRegex)).toBeInTheDocument();\n    });\n\n    test('should handle invalid timestamps gracefully', () => {\n      const messageWithInvalidTimestamp: ChatMessageData = {\n        id: 'msg_invalid_ts',\n        timestamp: 'invalid-timestamp',\n        type: 'campaign',\n        content: 'Test content',\n        isJson: false\n      };\n      \n      render(<ChatMessage message={messageWithInvalidTimestamp} />);\n      \n      // Should display original invalid timestamp\n      expect(screen.getByText('invalid-timestamp')).toBeInTheDocument();\n    });\n  });\n\n  describe('Interaction and Accessibility', () => {\n    test('should handle expand/collapse interactions', () => {\n      const message = createMessage(validCampaignRecommendation);\n      const mockOnToggle = jest.fn();\n      \n      render(<ChatMessage message={message} onToggleCollapse={mockOnToggle} />);\n      \n      // Click to expand\n      fireEvent.click(screen.getByText(/High Intent Customers/));\n      expect(mockOnToggle).toHaveBeenCalledWith('msg_123');\n      \n      // Click to collapse\n      fireEvent.click(screen.getByText('Campaign Recommendation'));\n      expect(mockOnToggle).toHaveBeenCalledTimes(2);\n    });\n\n    test('should be keyboard accessible', () => {\n      const message = createMessage(validCampaignRecommendation);\n      render(<ChatMessage message={message} />);\n      \n      const summaryElement = screen.getByText(/High Intent Customers/);\n      \n      // Should be focusable (has click handler)\n      expect(summaryElement).toHaveStyle('cursor: pointer');\n    });\n  });\n\n  describe('Performance and Edge Cases', () => {\n    test('should handle large JSON objects', () => {\n      const largeJson = {\n        ...validCampaignRecommendation,\n        channel_plan: Array(10).fill(0).map((_, i) => ({\n          channel: 'Email',\n          send_at: new Date().toISOString(),\n          priority: i + 1,\n          payload: {\n            subject: `Subject ${i}`,\n            body: `Body ${i}`,\n            cta: { text: 'Click', url: '#' },\n            metadata: {}\n          },\n          delivery_instructions: {\n            retry_policy: 'exponential_backoff',\n            timeout_sec: 30\n          }\n        }))\n      };\n      \n      const message = createMessage(largeJson);\n      \n      // Should render without performance issues\n      const startTime = performance.now();\n      render(<ChatMessage message={message} />);\n      const endTime = performance.now();\n      \n      expect(endTime - startTime).toBeLessThan(1000); // Should render in less than 1 second\n    });\n\n    test('should handle deeply nested objects', () => {\n      const deeplyNested = {\n        ...validCampaignRecommendation,\n        campaign_meta: {\n          ...validCampaignRecommendation.campaign_meta,\n          source_snapshot: {\n            level1: {\n              level2: {\n                level3: {\n                  level4: {\n                    deep_value: 'test'\n                  }\n                }\n              }\n            }\n          }\n        }\n      };\n      \n      const message = createMessage(deeplyNested);\n      expect(() => render(<ChatMessage message={message} />)).not.toThrow();\n    });\n  });\n});